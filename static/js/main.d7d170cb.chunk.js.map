{"version":3,"sources":["fbase.js","components/AuthForm.js","Routes/Auth.js","components/Maxtweet.js","components/MaxTweetFactory.js","Routes/Home.js","Routes/Profile.js","components/Navigation.js","components/Router.js","components/App.js","index.js"],"names":["firebase","initializeApp","apiKey","process","authDomain","projectId","storageBucket","messagingSenderId","appId","firebaseInstance","authService","auth","dbService","firestore","storageService","storage","AuthForm","useState","email","setEmail","password","setPassword","newAccount","setNewAccount","error","setError","onChange","event","target","name","value","onSubmit","a","preventDefault","createUserWithEmailAndPassword","data","signInWithEmailAndPassword","console","log","message","className","type","placeholder","required","onClick","prev","Auth","onSocialClick","provider","GoogleAuthProvider","GithubAuthProvider","signInWithPopup","icon","faTwitter","color","size","style","marginBottom","faGoogle","faGithub","MaxTweet","maxtweetObj","isOwner","editing","setEditing","text","newMaxtweet","setNewMaxtweet","onDeleteClick","window","confirm","doc","id","delete","attachmentUrl","refFromURL","toggleEditing","update","autoFocus","alt","src","faTrash","faPencilAlt","MaxtweetFactory","userObj","maxtweet","setMaxtweet","attachment","setAttachment","attachmentRef","ref","child","uid","uuidv4","putString","response","getDownloadURL","createdAt","Date","now","creatorId","collection","add","maxLength","for","faPlus","accept","theFile","files","reader","FileReader","onloadend","finishedEvent","result","readAsDataURL","opacity","backgroundImage","document","getElementById","faTimes","Home","maxtweets","setMaxtweets","useEffect","getData","orderBy","onSnapshot","snapshot","maxtweetArray","docs","map","marginTop","Profile","refreshUser","history","useHistory","displayName","newDisplayName","setNewDisplayName","updateProfile","signOut","push","Navigation","display","justifyContent","to","marginRight","marginLeft","flexDirection","alignItems","fontSize","faUser","AppRouter","isLoggedIn","maxWidth","width","margin","exact","path","App","init","setInit","setUserObj","onAuthStateChanged","user","args","currentUser","Boolean","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.d7d170cb.chunk.js","sourcesContent":["import firebase from \"firebase/app\";\nimport \"firebase/auth\";\nimport \"firebase/firestore\";\nimport \"firebase/storage\";\n\nconst firebaseConfig = {\n  apiKey: process.env.REACT_APP_API_KEY,\n  authDomain: process.env.REACT_APP_AUTH_DOMAIN,\n  projectId: process.env.REACT_APP_PROJECT_ID,\n  storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\n  messagingSenderId: process.env.REACT_APP_MESSAGIN_ID,\n  appId: process.env.REACT_APP_APP_ID,\n};\n\nfirebase.initializeApp(firebaseConfig);\n\nexport const firebaseInstance = firebase;\n\nexport const authService = firebase.auth();\nexport const dbService = firebase.firestore();\nexport const storageService = firebase.storage();\n","import { authService } from \"fbase\";\nimport React, { useState } from \"react\";\n\nconst AuthForm = () => {\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [newAccount, setNewAccount] = useState(true);\n  const [error, setError] = useState(\"\");\n  const onChange = (event) => {\n    const {\n      target: { name, value },\n    } = event;\n    if (name === \"email\") {\n      setEmail(value);\n    } else if (name === \"password\") {\n      setPassword(value);\n    }\n  };\n  const onSubmit = async (event) => {\n    event.preventDefault();\n    try {\n      let data;\n      if (newAccount) {\n        data = await authService.createUserWithEmailAndPassword(\n          email,\n          password\n        );\n      } else {\n        data = await authService.signInWithEmailAndPassword(email, password);\n      }\n      console.log(data);\n    } catch (error) {\n      setError(error.message);\n    }\n  };\n  const toggleAccount = () => setNewAccount((prev) => !prev);\n  return (\n    <>\n      <form onSubmit={onSubmit} className=\"container\">\n        <input\n          name=\"email\"\n          type=\"email\"\n          placeholder=\"E-mail\"\n          required\n          value={email}\n          onChange={onChange}\n          className=\"authInput\"\n        />\n        <input\n          name=\"password\"\n          type=\"password\"\n          placeholder=\"Password\"\n          required\n          value={password}\n          onChange={onChange}\n          className=\"authInput\"\n        />\n        <input\n          type=\"submit\"\n          value={newAccount ? \"Create Account\" : \"Sign In\"}\n          className=\"authInput authSubmit\"\n        />\n        {error && <span className=\"authError\">{error}</span>}\n      </form>\n\n      <span onClick={toggleAccount} className=\"authSwitch\">\n        {newAccount ? \"Sign In\" : \"Create Account\"}\n      </span>\n    </>\n  );\n};\n\nexport default AuthForm;\n","import AuthForm from \"components/AuthForm\";\nimport { authService, firebaseInstance } from \"fbase\";\nimport React from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n  faTwitter,\n  faGoogle,\n  faGithub,\n} from \"@fortawesome/free-brands-svg-icons\";\n\nconst Auth = () => {\n  const onSocialClick = async (event) => {\n    const {\n      target: { name },\n    } = event;\n    let provider;\n    if (name === \"google\") {\n      provider = new firebaseInstance.auth.GoogleAuthProvider();\n    } else if (name === \"github\") {\n      provider = new firebaseInstance.auth.GithubAuthProvider();\n    }\n    await authService.signInWithPopup(provider);\n  };\n  return (\n    <div className=\"authContainer\">\n      <FontAwesomeIcon\n        icon={faTwitter}\n        color={\"#04AAFF\"}\n        size=\"3x\"\n        style={{ marginBottom: 30 }}\n      />\n      <AuthForm />\n      <div className=\"authBtns\">\n        <button onClick={onSocialClick} name=\"google\" className=\"authBtn\">\n          Continue with Google <FontAwesomeIcon icon={faGoogle} />\n        </button>\n        <button onClick={onSocialClick} name=\"github\" className=\"authBtn\">\n          Continue with Github <FontAwesomeIcon icon={faGithub} />\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default Auth;\n","import { dbService, storageService } from \"fbase\";\nimport React, { useState } from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faTrash, faPencilAlt } from \"@fortawesome/free-solid-svg-icons\";\n\nconst MaxTweet = ({ maxtweetObj, isOwner }) => {\n  const [editing, setEditing] = useState(false);\n  const [newMaxtweet, setNewMaxtweet] = useState(maxtweetObj.text);\n  const onDeleteClick = async () => {\n    const ok = window.confirm(\"Are you sure you want to delete this one?\");\n    if (ok) {\n      await dbService.doc(`maxtweets/${maxtweetObj.id}`).delete();\n      if (maxtweetObj.attachmentUrl !== \"\") {\n        await storageService.refFromURL(maxtweetObj.attachmentUrl).delete();\n      }\n    }\n  };\n  const toggleEditing = () => setEditing((prev) => !prev);\n  const onSubmit = async (event) => {\n    event.preventDefault();\n    await dbService.doc(`maxtweets/${maxtweetObj.id}`).update({\n      text: newMaxtweet,\n    });\n    setEditing(false);\n  };\n  const onChange = (event) => {\n    const {\n      target: { value },\n    } = event;\n    setNewMaxtweet(value);\n  };\n  return (\n    <div className=\"nweet\">\n      {editing ? (\n        <>\n          {isOwner && (\n            <>\n              <form onSubmit={onSubmit} className=\"container nweetEdit\">\n                <input\n                  onChange={onChange}\n                  type=\"text\"\n                  placeholder=\"Edit your Maxtweet\"\n                  value={newMaxtweet}\n                  autoFocus\n                  required\n                  className=\"formInput\"\n                />\n                <input\n                  type=\"submit\"\n                  value=\"Update MaxTweet\"\n                  className=\"formBtn\"\n                />\n              </form>\n              <span onClick={toggleEditing} className=\"formBtn cancelBtn\">\n                Cancel\n              </span>\n            </>\n          )}\n        </>\n      ) : (\n        <>\n          <h4>{maxtweetObj.text}</h4>\n          {maxtweetObj.attachmentUrl && (\n            <img alt={maxtweetObj.text} src={maxtweetObj.attachmentUrl} />\n          )}\n          {isOwner && (\n            <div className=\"nweet__actions\">\n              <span onClick={onDeleteClick}>\n                <FontAwesomeIcon icon={faTrash} />\n              </span>\n              <span onClick={toggleEditing}>\n                <FontAwesomeIcon icon={faPencilAlt} />\n              </span>\n            </div>\n          )}\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default MaxTweet;\n","import { dbService, storageService } from \"fbase\";\nimport React, { useState } from \"react\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faPlus, faTimes } from \"@fortawesome/free-solid-svg-icons\";\n\nconst MaxtweetFactory = ({ userObj }) => {\n  const [maxtweet, setMaxtweet] = useState(\"\");\n  const [attachment, setAttachment] = useState(\"\");\n  const onSubmit = async (event) => {\n    if (maxtweet === \"\") {\n      return;\n    }\n    event.preventDefault();\n    let attachmentUrl = \"\";\n\n    if (attachment !== \"\") {\n      const attachmentRef = storageService\n        .ref()\n        .child(`${userObj.uid}/${uuidv4()}`); // random 이름 설정\n      const response = await attachmentRef.putString(attachment, \"data_url\");\n      attachmentUrl = await response.ref.getDownloadURL(); // bucket 의 url\n    }\n\n    const maxtweetObj = {\n      text: maxtweet,\n      createdAt: Date.now(),\n      creatorId: userObj.uid,\n      attachmentUrl,\n    };\n\n    await dbService.collection(\"maxtweets\").add(maxtweetObj);\n    setMaxtweet(\"\");\n    setAttachment(\"\");\n  };\n  const onChange = (event) => {\n    const {\n      target: { value },\n    } = event;\n    setMaxtweet(value);\n  };\n  const onFileChange = (event) => {\n    const {\n      target: { files },\n    } = event;\n    const theFile = files[0];\n    const reader = new FileReader();\n    reader.onloadend = (finishedEvent) => {\n      // fileloading 이 끝나면 실행\n      const {\n        target: { result },\n      } = finishedEvent;\n      setAttachment(result);\n    };\n    reader.readAsDataURL(theFile);\n  };\n  const onClearAttachment = () => {\n    setAttachment(\"\");\n    const fileInput = document.getElementById(\"fileInput\");\n    fileInput.value = null;\n  };\n  return (\n    <form onSubmit={onSubmit} className=\"factoryForm\">\n      <div className=\"factoryInput__container\">\n        <input\n          className=\"factoryInput__input\"\n          value={maxtweet}\n          onChange={onChange}\n          type=\"text\"\n          placeholder=\"What's on your mind?\"\n          maxLength={120}\n        />\n        <input type=\"submit\" value=\"&rarr;\" className=\"factoryInput__arrow\" />\n      </div>\n      <label for=\"attach-file\" className=\"factoryInput__label\">\n        <span>Add photos</span>\n        <FontAwesomeIcon icon={faPlus} />\n      </label>\n      <input\n        id=\"attach-file\"\n        type=\"file\"\n        accept=\"image/*\"\n        onChange={onFileChange}\n        style={{\n          opacity: 0,\n        }}\n      />\n\n      {attachment && (\n        <div className=\"factoryForm__attachment\">\n          <img\n            alt=\"text\"\n            src={attachment}\n            style={{\n              backgroundImage: attachment,\n            }}\n          />\n          <div className=\"factoryForm__clear\" onClick={onClearAttachment}>\n            <span>Remove</span>\n            <FontAwesomeIcon icon={faTimes} />\n          </div>\n        </div>\n      )}\n    </form>\n  );\n};\n\nexport default MaxtweetFactory;\n","import MaxTweet from \"components/Maxtweet\";\nimport MaxtweetFactory from \"components/MaxTweetFactory\";\nimport { dbService } from \"fbase\";\nimport React, { useEffect, useState } from \"react\";\n\nconst Home = ({ userObj }) => {\n  const [maxtweets, setMaxtweets] = useState([]);\n  useEffect(() => {\n    const getData = dbService\n      .collection(\"maxtweets\")\n      .orderBy(\"createdAt\", \"desc\")\n      .onSnapshot((snapshot) => {\n        const maxtweetArray = snapshot.docs.map((doc) => ({\n          id: doc.id,\n          ...doc.data(),\n        }));\n        setMaxtweets(maxtweetArray);\n      });\n    return () => getData();\n  }, []);\n\n  return (\n    <div className=\"container\">\n      <MaxtweetFactory userObj={userObj} />\n      <div style={{ marginTop: 30 }}>\n        {maxtweets.map((maxtweet) => (\n          <MaxTweet\n            key={maxtweet.id}\n            maxtweetObj={maxtweet}\n            isOwner={maxtweet.creatorId === userObj.uid} // creatorId 와 props 로 받은 userObj.id 비교\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default Home;\n","import { authService } from \"fbase\";\nimport React, { useState } from \"react\";\nimport { useHistory } from \"react-router\";\n\nconst Profile = ({ refreshUser, userObj }) => {\n  const history = useHistory();\n  const [newDisplayName, setNewDisplayName] = useState(userObj.displayName);\n  const onLogOutClick = () => {\n    authService.signOut();\n    history.push(\"/\");\n  };\n  const onChange = (event) => {\n    const {\n      target: { value },\n    } = event;\n    setNewDisplayName(value);\n  };\n  const onSubmit = async (event) => {\n    event.preventDefault();\n    if (userObj.displayName !== newDisplayName) {\n      await userObj.updateProfile({\n        displayName: newDisplayName,\n      });\n      refreshUser();\n    }\n  };\n  // const getMyMaxtweet = async () => {\n  //   const maxtweets = await dbService\n  //     .collection(\"maxtweets\")\n  //     .where(\"creatorId\", \"==\", userObj.uid)\n  //     .orderBy(\"createdAt\", \"desc\")\n  //     .get();\n  //   console.log(maxtweets.docs.map((doc) => doc.data()));\n  // };\n  // useEffect(() => {\n  //   getMyMaxtweet();\n  // }, []);\n  return (\n    <div className=\"container\">\n      <form onSubmit={onSubmit} className=\"profileForm\">\n        <input\n          type=\"text\"\n          placeholder=\"Display name\"\n          onChange={onChange}\n          value={newDisplayName}\n          autoFocus\n          className=\"formInput\"\n        />\n        <input\n          type=\"submit\"\n          value=\"Update Profile\"\n          className=\"formBtn\"\n          style={{\n            marginTop: 10,\n          }}\n        />\n      </form>\n      <span className=\"formBtn cancelBtn logOut\" onClick={onLogOutClick}>\n        Log Out\n      </span>\n    </div>\n  );\n};\n\nexport default Profile;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faTwitter } from \"@fortawesome/free-brands-svg-icons\";\nimport { faUser } from \"@fortawesome/free-solid-svg-icons\";\n\nconst Navigation = ({ userObj }) => {\n  return (\n    <nav>\n      <ul style={{ display: \"flex\", justifyContent: \"center\", marginTop: 50 }}>\n        <li>\n          <Link to=\"/\" style={{ marginRight: 10 }}>\n            <FontAwesomeIcon icon={faTwitter} color={\"#04AAFF\"} size=\"2x\" />\n          </Link>\n        </li>\n        <li>\n          <Link\n            to=\"/profile\"\n            style={{\n              marginLeft: 10,\n              display: \"flex\",\n              flexDirection: \"column\",\n              alignItems: \"center\",\n              fontSize: 12,\n            }}\n          >\n            <FontAwesomeIcon icon={faUser} color={\"#04AAFF\"} size=\"2x\" />\n            <span style={{ marginTop: 10 }}>\n              {userObj.displayName\n                ? `${userObj.displayName}의 Profile`\n                : \"Profile\"}\n            </span>\n          </Link>\n        </li>\n      </ul>\n    </nav>\n  );\n};\n\nexport default Navigation;\n","import React from \"react\";\nimport { HashRouter as Router, Route, Switch } from \"react-router-dom\";\nimport Auth from \"Routes/Auth\";\nimport Home from \"Routes/Home\";\nimport Profile from \"Routes/Profile\";\nimport Navigation from \"components/Navigation\";\n\nconst AppRouter = ({ refreshUser, isLoggedIn, userObj }) => {\n  return (\n    <Router>\n      {isLoggedIn && <Navigation userObj={userObj} />}\n      <Switch>\n        {isLoggedIn ? (\n          <div\n            style={{\n              maxWidth: 890,\n              width: \"100%\",\n              margin: \"0 auto\",\n              marginTop: 80,\n              display: \"flex\",\n              justifyContent: \"center\",\n            }}\n          >\n            <Route exact path=\"/\">\n              <Home userObj={userObj} />\n            </Route>\n            <Route exact path=\"/profile\">\n              <Profile userObj={userObj} refreshUser={refreshUser} />\n            </Route>\n          </div>\n        ) : (\n          <>\n            <Route exact path=\"/\">\n              <Auth />\n            </Route>\n          </>\n        )}\n      </Switch>\n    </Router>\n  );\n};\n\nexport default AppRouter;\n","import { useEffect, useState } from \"react\";\nimport AppRouter from \"components/Router\";\nimport { authService } from \"fbase\";\n\nfunction App() {\n  const [init, setInit] = useState(false);\n  const [userObj, setUserObj] = useState(null);\n  useEffect(() => {\n    authService.onAuthStateChanged((user) => {\n      // Auth 상태를 listen -> log in 여부 판단\n      if (user) {\n        setUserObj({\n          displayName: user.displayName,\n          uid: user.uid,\n          updateProfile: (args) => user.updateProfile(args),\n        }); // user 정보를 userObj 에 담음\n      } else {\n        setUserObj(null);\n      }\n      setInit(true);\n    });\n  }, []);\n  const refreshUser = () => {\n    const user = authService.currentUser;\n    setUserObj({\n      displayName: user.displayName,\n      uid: user.uid,\n      updateProfile: (args) => user.updateProfile(args),\n    });\n  };\n  return (\n    <>\n      {init ? (\n        <AppRouter\n          refreshUser={refreshUser}\n          isLoggedIn={Boolean(userObj)}\n          userObj={userObj}\n        /> // userObj를 props로 router 에 전달\n      ) : (\n        \"Initializing...\"\n      )}\n      {/* <footer> &copy; {new Date().getFullYear()} MaxTwitter </footer> */}\n    </>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\nimport \"./styles.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}